apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android['compileSdkVersion']

    defaultConfig {
        applicationId rootProject.ext.android['applicationId']
        minSdkVersion rootProject.ext.android['minSdkVersion']
        targetSdkVersion rootProject.ext.android['targetSdkVersion']
        versionCode rootProject.ext.android['versionCode']
        versionName rootProject.ext.android['versionName']
        multiDexEnabled rootProject.ext.android['multiDexEnabled']
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            storeFile file("tangkey.jks")
            storePassword "12345678"
            keyAlias "tangAlias"
            keyPassword "12345678"
        }
        debug {
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            zipAlignEnabled rootProject.ext.android['zipAlignEnabled']
            minifyEnabled rootProject.ext.android['minifyEnabled']
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.release
            minifyEnabled rootProject.ext.android['minifyEnabled']
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //如果方法数增多，使用分包方法时，设置此方法增快编译速度
    dexOptions {
        preDexLibraries = false
    }

    /*buildTypes {
        release {
            minifyEnabled rootProject.ext.android['minifyEnabled']
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }*/
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies['constraint-layout']
    implementation project(path: ':common')
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    annotationProcessor(rootProject.ext.dependencies['butterknife-compiler']) {
        exclude module: 'support-annotations'
        exclude module: 'support-compat'
    }
    testImplementation rootProject.ext.dependencies['junit']
    androidTestImplementation rootProject.ext.dependencies['runner']
    androidTestImplementation rootProject.ext.dependencies['espresso-core']
    debugImplementation rootProject.ext.dependencies["canary-debug"]
    releaseImplementation rootProject.ext.dependencies["canary-release"]
    testImplementation rootProject.ext.dependencies["canary-release"]

    if(rootProject.ext.module['module_home'] as boolean){
        implementation project(path: ':module_home')
    }
}
